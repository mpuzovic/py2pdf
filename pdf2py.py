#!/usr/bin/env python3
#-*- coding: utf-8 -*-
'''
Converts PDF generated by py2pdf.py to Python source code
'''

import argparse
import os
import sys

from pdfminer.pdfinterp import (
    PDFResourceManager,
    PDFPageInterpreter)
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage

def get_output_file(inputname, outputname=None):
    '''
    Returns output name
    '''
    if outputname:
        return outputname

    inputbase = os.path.split(inputname)[-1]
    outputbase = "{}.py".format(os.path.splitext(inputbase)[0])
    return os.path.join(os.getcwd(), outputbase)

def parse_arg():
    '''
    Parses command line arguments
    '''
    parser = argparse.ArgumentParser(
        description=(
            "Convert given PDF to Python text source code"))

    parser.add_argument(
        "filename",
        help="absolute path to PDF file",
        type=str)

    parser.add_argument(
        "outputfile",
        help="absolute path of the output py file",
        nargs="?",
        type=str)

    return parser.parse_args()

def main():
    '''
    Main entry point
    '''

    args = parse_arg()
    py_file = get_output_file(args.filename, args.outputfile)

    temp_py_file = py_file + '.temp'

    rsrcmgr = PDFResourceManager(caching=True)
    out_temp_fp = open(temp_py_file, 'w')
    device = TextConverter(rsrcmgr,
                           out_temp_fp,
                           codec='utf-8',
                           laparams=LAParams(),
                           imagewriter=None)


    in_fp = open(args.filename, 'rb')
    interpreter = PDFPageInterpreter(rsrcmgr, device)
    for page in PDFPage.get_pages(in_fp, set()):
        interpreter.process_page(page)
    in_fp.close()
    device.close()

    out_temp_fp.close()
    # now process line wraps
    new_lines = []

    out_temp_fp = open(temp_py_file, 'r')
    for line in out_temp_fp.readlines():
        if '\f' in line[0]:
            line = line[1:]
            if not line:
                continue

        if not line:
            new_lines.append('')
            continue

        line = line.replace(u'\u00a0', ' ')

        if u'\u21aa' in line[0] or (ord(line[0]) == 110):
            last_line_index = -1
            while not new_lines[last_line_index]:
                last_line_index -= 1
            if len(new_lines[last_line_index]) > 1 and \
               (new_lines[last_line_index][-2] == u'\u21a9' or \
                (ord(new_lines[last_line_index][-1]) == 32 and \
                 ord(new_lines[last_line_index][-2]) == 110)):

                line = new_lines[last_line_index][:-2] + line[1:]
                new_lines[last_line_index] = line[:-1]
                continue

        if '\\' in line and \
           ord(line[-1]) == 10 and \
           ord(line[-2]) == 32 and \
           ord(line[-3]) == 92:
            # if line finishes with \ make sure
            # there is no space at the end of the line
            new_lines.append(line[:-2])
        else:
            new_lines.append(line[:-1])

    with open(py_file, 'w') as f_py_file:
        for line in new_lines:
            f_py_file.write(line + '\n')

    out_temp_fp.close()
    os.remove(temp_py_file)


if __name__ == "__main__":
    sys.exit(main())
